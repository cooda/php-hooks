<?php


use Cooda\Hooks\Hook;
use PHPUnit\Framework\TestCase;

class HookTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testAdd()
    {
        $hook = new Hook();

        $hook->add(function () {});
        $hook->add(function () {});

        $this->assertCount(2, $hook->getCallbacks(), 'Callback not added');
    }

    public function testDoWithArguments()
    {
        $hook = new Hook();

        $hook->add(function (&$arg) {
            ++$arg;
        })->add(function (&$arg) {
            ++$arg;
        })->add(function (&$arg) {
            ++$arg;
        });

        $this->assertEquals(3, $hook->do(0)[0]);
    }

    public function testDoWithoutArguments()
    {
        $hook = new Hook();

        $hook->add(function () {
            return 0;
        })->add(function (&$arg) {
            ++$arg;
        })->add(function (&$arg) {
            ++$arg;
        });

        $this->assertEquals(2, $hook->do(0)[0]);
    }

    public function testCreateKey()
    {
        $staticMethod = 'Tests\Lib\SomeClass::staticMethod';

        $this->assertEquals(Hook::createKey($staticMethod, 4), '4'.Hook::PND.$staticMethod);
        $this->assertEquals(Hook::createKey($staticMethod, -4), '-4'.Hook::PND.$staticMethod);
        $this->assertEquals(Hook::createKey($staticMethod, -0.5), '-0.5'.Hook::PND.$staticMethod);
        $this->assertEquals(Hook::createKey($staticMethod, 4.5), '4.5'.Hook::PND.$staticMethod);
        $this->assertEquals(Hook::createKey($staticMethod, 0.5), '0.5'.Hook::PND.$staticMethod);
        $this->assertEquals(Hook::createKey($staticMethod, 0.0), '0'.Hook::PND.$staticMethod);
        $this->assertEquals(Hook::createKey($staticMethod, '66'), '66'.Hook::PND.$staticMethod);
        $this->assertEquals(Hook::createKey($staticMethod), Hook::DEFAULT_PRIORITY.Hook::PND.$staticMethod);
    }
}
